{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>In this tutorial series, you will learn the basics of MWSE-Lua modding. No prior programming experience is required to follow along. This guide will walk you through every step in creating a mod called Craftable Bandage.</p> <p>This mod will allow you to use your character's Bushcrafting skill to craft bandages from OAAB_Data and the effect will vary depending on your character's Survival skill.</p> <p>The mod requires OAAB_Data, Skills Module, The Crafting Framework, and Ashfall. So install them if you haven't already.</p>"},{"location":"#credits","title":"Credits","text":"<ul> <li>Morrowind Script Extender Team, for the development of MWSE-Lua</li> <li>C3pa, for the MWSE-Lua documentation</li> <li>Danae, for the original idea of Craftable Bandage</li> <li>Greatness7, for the OAAB MWSE scripts</li> <li>Hrnchamd, for the Mkdocs help</li> <li>Jean-Baptiste Morizot, for BluuNext font</li> <li>Merlord, for Ashfall, Crafting Framework, Skills Module, and coding help</li> <li>NullCascade, for the Mkdocs help</li> <li>OAAB_Data Team, for the development of OAAB</li> <li>Pharis, for proofreading</li> <li>R-Zero, for the MWSE-Lua logo</li> <li>Uncle Boss, for editing and proofreading.</li> </ul> <p>Next - Episode 1: Introduction, Variables, Functions, Event-Based Programming</p>"},{"location":"1_introduction/","title":"Section 1: Introduction, Variables, Functions, Event-Based Programming","text":""},{"location":"1_introduction/#introduction","title":"Introduction","text":"<p>First, open up Visual Studio Code. If you don't have it, download and install it. This is the preferred IDE for MWSE modding.</p> <p>Once you have VSCode open, click File -&gt; Open Folder..., then navigate to <code>Morrowind\\Data Files\\MWSE</code>, and select the folder. You will be asked, \"Do you trust the authors of the files in this folder?\" Click \"Yes, I trust the authors\". </p> <p>If you don't already have the Lua and vscode-lua-format extensions installed, you'll see popups at the bottom left corner of the screen asking you to install them. Install both of them. </p> <p></p> <p>Next, we'll save this as workspace. Click File -&gt; Save Workspace As... Save.</p> <p>Now, we are going to create the folder for our MWSE mod. On the left side of the screen, we have the folders within the <code>MWSE</code> folder. Mods usually go under the <code>mods</code> folder. Expand that folder. So long as your mod has a <code>main.lua</code>, you can put it anywhere within the <code>mods</code> folder. However, we will use the <code>mods/modderName/modName</code> naming convention. This avoids conflicting files and keeps everything tidy.</p> <p>For example, in this mod, the path of main.lua will be <code>MWSE/mods/Amalie/craftableBandage/main.lua</code>.</p> <p>You can name your folders any way you want, we used camelCase, that is, no separator between words, first letter lowercased, and the first letter of all other words capitalized. But you can use snake_case <code>craftable_bandage</code> or Normal <code>Craftable Bandage</code>. Just remember, don't put a dot in your folder name. Do not do this <code>craftable.bandage</code>, for example.</p>"},{"location":"1_introduction/#comments","title":"Comments","text":"<p>Before we do any coding, let's learn about how to comment in Lua first. Oftentimes, you want to add information about the mod and its author at the top of the script.</p> <p>When Lua code is run, comments will be skipped. Any line starting with a double dash <code>--</code> is considered a comment. This is a single line of comment.</p> <pre><code>-- Mod: Craftable Bandage\n</code></pre> <p>You can also do multi-line comment with <code>--[[]]</code>. That is, double dash followed by two opening brackets with two closing brackets following the comment. Let's add some information about our mod. </p> <pre><code>--[[\n    Mod: Craftable Bandage\n    Author: Amalie\n\n    This mod allows you to craft OAAB bandages with novice bushcrafting skill.\n    It serves as an alternative to alchemy and restoration.\n]]\n</code></pre>"},{"location":"1_introduction/#variables","title":"Variables","text":"<p>Now let's learn how to create a variable in Lua. A variable holds some type of data which can be manipulated and referred to. This mod is Craftable Bandage, so we will create a local variable called <code>bandageId</code> and set it to the id of one of the OAAB bandages.</p> <pre><code>local bandageId = \"AB_alc_HealBandage02\"\n</code></pre> <p>In Lua, variables are global by default but you probably don't want that most of the time. The <code>local</code> here specifies that this is a local variable, as opposed to a global variable.</p> <p><code>bandageId</code> is the variable name. </p> <p>The equal symbol <code>=</code> is the assignment operator and we're assigning a string to <code>bandageId</code>. A string is a collection of characters like <code>AB_alc_HealBandage02</code> and it is enclosed in double or single quotation marks. </p> <p>One thing you'll notice is that you don't need to put a semicolon <code>;</code> at the end of each line in Lua. </p>"},{"location":"1_introduction/#functions","title":"Functions","text":"<p>Let's move on to functions. A function is a block of code which only runs when it is called. Let's define an empty function called <code>registerBushcraftingRecipe</code>.</p> <pre><code>local function registerBushcraftingRecipe()\n\nend\n</code></pre> <p>If you are following along the tutorial, you can see in the IDE, both the function and the variable we just created are greyed out. Hovering over it, it tells us that they are unused function and unused local. That's because we haven't called them or used them anywhere in the script yet. Let's do that now.</p> <p>To call a function, type the name of the function followed by a pair of parentheses.</p> <pre><code>registerBushcraftingRecipe()\n</code></pre> <p>Right now, when the function is called, it's not doing anything. So let's use this function to print some information to MWSE.log.</p> <pre><code>mwse.log(\"[Craftable Bandage] Registering bushcrafting recipe...\")\n</code></pre> <p>This is one of the most common ways to write information to MWSE.log and we will look at another way (a better way) to do logging later. For now, let's run Morrowind.exe and check the log. You should be able to see <code>[Craftable Bandage] registering bushcrafting recipe...</code> in the log. </p> <p>MWSE.log can hold lots of useful information for modders if they know how to read and write it. The line starts with <code>[Craftable Bandage]</code> is the line our script wrote. Lines starts with <code>[Crafting Framework]</code> and <code>[Ashfall]</code> are the lines Crafting Framework (CF) and Ashfall wrote. Our line printed before CF implies that our function was run before CF and Ashfall started running. </p> <p>But we want to register the bandage recipe when CF is registering bushcrafting recipes. How do we do that? Well, let's learn about event-driven programming. </p>"},{"location":"1_introduction/#event-driven-programming","title":"Event-Driven Programming","text":"<p>In event-driven programming, or event-based programming, events are \"fired\" when an action takes place. Your code listens for them and handles them accordingly. You can look up all the events MWSE provides here.</p> <p>Let's look at the <code>initialized</code> event. This fires when game code has finished initializing, and all masters and plugins have been loaded. Let's copy the example code provided in the document page and paste it in our main.lua.</p> <pre><code>--- @param e initializedEventData\nlocal function initializedCallback(e)\nend\nevent.register(tes3.event.initialized, initializedCallback)\n</code></pre> <p>Here, <code>tes3.event.initialized</code> is the event name and <code>initializedCallback</code> is the function to call when <code>initialized</code> event is fired. Same as before let's write some information to print out to MWSE.log.</p> <pre><code>mwse.log(\"[Craftable Bandage] Initialized\")\n</code></pre> <p>Usually, you want to register your mod's events inside <code>initializedCallback</code>. And in our case, we need to register the <code>\"Ashfall:ActivateBushcrafting:Registered\"</code> event and <code>registerBushcraftingRecipe()</code> will be the event callback function.</p> <pre><code>event.register(\"Ashfall:ActivateBushcrafting:Registered\", registerBushcraftingRecipe)\n</code></pre> <p>What this means is when Ashfall is registering their bushcrafting recipes, our <code>registerBushcraftingRecipe()</code> function will run. So let's test this. Launch the game and read the MWSE.log. </p> <p>If we search the log for \"Bandage\", you'll could only find the <code>\"Initialized\"</code> log but not the <code>\"registering recipe\"</code> log. That's because, the print order of the logs, you know that our mod was initialized after Crafting Framework finished registering all the MenuActivator. That's why our event callback never runs. </p> <p>We can fix this by tweaking the <code>priority</code> when registering our <code>initialized</code> event. </p> <pre><code>event.register(tes3.event.initialized, initializedCallback, { priority = 100 })\n</code></pre> <p>Functions registered with higher <code>priority</code> will run first. The default is 0. Setting the <code>priority</code> to be anything higher than 0 can make sure our <code>initializedCallback</code> will run before The Crafting Framework registered all of the recipes. </p> <p>Launch the game again. Now you should be able to see in your log that our bandage recipe was registered right when The Crafting Framework was registering Ashfall's Bushcrafting MenuActivator.</p> <p>That's it for today. You've learned how to comment, how to create variables and functions, and the concept of event-driven programming. See you in the next section.</p> What your main.lua should look like <pre><code>--[[\n    Mod: Craftable Bandage\n    Author: Amalie\n\n    This mod allows you to craft OAAB bandages with novice bushcrafting skill.\n    It serves as an alternative to alchemy and restoration.\n]] --\n\nlocal bandageId = \"AB_alc_Healbandage02\"\n\nlocal function registerBushcraftingRecipe()\n    mwse.log(\"[Craftable Bandage] Registering bandage recipe...\")\nend\n\n--- @param e initializedEventData\nlocal function initializedCallback(e)\n    event.register(\"Ashfall:ActivateBushcrafting:Registered\",\n                registerBushcraftingRecipe)\n    mwse.log(\"[Craftable Bandage] Initialized\")\nend\nevent.register(tes3.event.initialized, initializedCallback,\n            { priority = 100 }) -- before crafting framework\n</code></pre> <p>Next - Section 2: Libraries, Logging, Crafting Framework Recipes</p>"},{"location":"2_crafting_framework_recipes/","title":"Section 2: Modules, Logging, Crafting Framework Recipes","text":"<p>Welcome back, today we're gonna learn about modules, logging, function arguments, lists, Crafting Framework recipes, and we are going to test our script in game.</p>"},{"location":"2_crafting_framework_recipes/#modules","title":"Modules","text":"<p>Our mod relies on Skills Module, The Crafting Framework, and Ashfall. They need to be imported into our script so we have access to their functions. Imports are typically placed at the top of the script.</p> <pre><code>local ashfall = include(\"mer.ashfall.interop\")\nlocal CraftingFramework = include(\"CraftingFramework\")\nlocal skillModule = include(\"OtherSkills.skillModule\")\nlocal logging = require(\"logging.logger\")\n</code></pre> <p><code>include</code> and <code>require</code> are the two ways to import modules to your script. The difference between the two is that <code>include</code> doesn't require you to have the mod installed, but <code>require</code> does.</p>"},{"location":"2_crafting_framework_recipes/#logging","title":"Logging","text":"<p>Besides the aforementioned mods, we should also import the logging module. I mentioned before there is another way to do and it's by creating a logger with the logging module. </p> <pre><code>---@type mwseLogger\nlocal log = logging.new({\n    name = \"Craftable Bandage\",\n    logLevel = \"INFO\",\n})\n</code></pre> <p>Now we can replace all occurrences of <code>mwse.log</code> with <code>log:info</code>. To replace phrases in VSCode, highlight the phrase you want to replace and press Ctrl + H, enter <code>log:info</code> and click Replace All.</p>"},{"location":"2_crafting_framework_recipes/#function-arguments","title":"Function Arguments","text":"<p>Now let's look back at the <code>initalizedCallback</code> function that we copied from the MWSE doc. You'll notice there is an <code>e</code> inside the parentheses. This is a function argument, specifically event data.</p> <p>Event data is defined by MWSE and you can look them up in the MWSE doc events pages. Here <code>@param</code> is a tag to specify the types of the parameters of a function. So here, parameter <code>e</code> is of type <code>initializedEventData</code>.</p> <p>And we want to specify the parameter for function <code>registerBushcraftingRecipe()</code> as well. But the <code>Ashfall:ActivateBushcrafting:Registered</code> event is not added by MWSE. It is added by Crafting Framework (CF) and Ashfall.</p> <p>The documentation for them isn't great yet. The best place to ask questions about CF will be over at the #crafting-framework channel in the Morrowind Modding Community discord server. </p> <p>Alternatively, you can just search the script. You can find the event data type in <code>CraftingFramework\\components\\MenuActivator.lua</code>. The event data is of type <code>CraftingFramework.MenuActivator.RegisteredEvent</code> and it has a menuActivator field. Copy this over to our script.</p> <pre><code>--- @param e CraftingFramework.MenuActivator.RegisteredEvent\nlocal function registerBushcraftingRecipe(e)\n</code></pre> <p>The menuActivator here is the activator that Crafting Framework just registered. Now let's create a local variable called <code>bushcraftingActivator</code> inside this function and set it to the <code>menuActivator</code> that the event data passes in.</p> <pre><code>local bushcraftingActivator = e.menuActivator\n</code></pre>"},{"location":"2_crafting_framework_recipes/#list","title":"List","text":"<p>Next, we are going to create a list of recipes to register. A list is used to store multiple items in a single variable. Lists are enclosed in curly braces and each item is separated by a comma, like this:</p> <pre><code>local recipe1\nlocal recipe2\nlocal recipes = { recipe1, recipe2 }\n</code></pre> <p>So this is a list of recipes. For our purposes, we only need one recipe. A list is still a list if it only has one item. Additionally, we can specify its type <code>CraftingFramework.Recipe.data</code> using the <code>@type</code> tag.</p> <pre><code>--- @type CraftingFramework.Recipe.data\nlocal recipe\nlocal recipes = { recipe }\n</code></pre>"},{"location":"2_crafting_framework_recipes/#crafting-framework-recipe","title":"Crafting Framework Recipe","text":"<p>If you hover over <code>recipe</code> in your IDE, you can see a recipe can hold a lot of information.</p> <p>Since we're making a simple mod, we only need to specify the following:</p> <p><code>id</code>: the recipe identifier; </p> <p><code>craftableId</code>, the id of the craftable bandage; </p> <p><code>description</code>, this one is pretty straight-forward; </p> <p><code>materials</code>, what you need to craft this bandage. You need to give a list of material requirements here. You can enter Ashfall material id or any object id. A list of Ashfall materials can be found in the table <code>this.materials</code> in <code>mer\\ashfall\\bushcrafting\\config.lua</code>. The idea is that many different items can be classified as the same material, so we don't have to write duplicate recipes for each of the similar or same items. </p> <p>Next, <code>skillRequirements</code>, a list of skill requirement data. So if we want the character to have at least novice level of bushcrafting to be able to craft a bandage, we can do <code>skillRequirements = { ashfall.bushcrafting.survivalTiers.novice },</code> You can set both vanilla and Skills Module skills as the requirements.</p> <p><code>soundType</code>, you can specify <code>soundType</code>, <code>soundId</code>, <code>soundPath</code>, or nothing (to use the default sound). This is the sound that plays when players press the Craft button. A list of <code>soundType</code>s can be found in the table <code>constructionSounds</code> in <code>CraftingFramework\\components\\Craftables.lua</code>. We will use the \"fabric\" <code>soundType</code>.</p> <p><code>category</code> can be anything you like but we're going to use one of the Ashfall categories <code>\"Other\"</code>. A list of Ashfall categories can be found in the table <code>this.categories</code> in <code>mer\\ashfall\\bushcrafting\\config.lua</code>.</p> <pre><code>local recipe = {\n    id = bandageId,\n    craftableId = bandageId,\n    description = \"Simple cloth bandages for the dressing of wounds.\",\n    materials = { { material = \"fabric\", count = 1 } },\n    skillRequirements = { ashfall.bushcrafting.survivalTiers.novice },\n    soundType = \"fabric\",\n    category = \"Other\",\n}\n</code></pre> <p>Finally, use the <code>registerRecipes()</code> function to register our recipe! </p> <pre><code>bushcraftingActivator:registerRecipes(recipes)\nlog:info(\"Registered bandage recipe\")\n</code></pre>"},{"location":"2_crafting_framework_recipes/#testing","title":"Testing","text":"<p>Before we launch the game and test the script, if you don't have NullCascade's UI Expansion installed, I highly recommend you install it, as we will use it for our testing.</p> <p>Once you load into a save, open the console menu by hitting back quote or tilde <code>~</code> key. We want to give the player 5 fabric and level up bushcrafting to 20 to meet the requirement to craft a bandage. </p> <p>Enter the following two lines in the lua console. You can tell you are typing to the lua console if you see the lua button. If yours says mwscript, click on it to switch the lua console. If you don't see any button, enable the console component of UI Expansion in Mod Config Menu.</p> <pre><code>tes3.addItem({ reference = tes3.player, item = \"ashfall_fabric\", count = 5 })\ninclude(\"OtherSkills.skillModule\").getSkill(\"Bushcrafting\"):levelUpSkill(10)\n</code></pre> <p>Let's activate the fabric to open the crafting menu. You should be able to see our Craftable Bandage under the Other category. Craft! You have successfully crafted a Bandage!</p> <p>That's it for today! You've officially made your first MWSE mod! But both the tutorial and the mod are not yet finished. There is still a lot to learn and some features to add. Bye!</p> What your main.lua should look like <pre><code>--[[\n    Mod: Craftable Bandage\n    Author: Amalie\n\n    This mod allows you to craft OAAB bandages with novice bushcrafting skill.\n    It serves as an alternative to alchemy and restoration.\n]] --\n\nlocal ashfall = include(\"mer.ashfall.interop\")\nlocal CraftingFramework = include(\"CraftingFramework\")\nlocal skillModule = include(\"OtherSkills.skillModule\")\nlocal logging = require(\"logging.logger\")\n\n---@type mwseLogger\nlocal log = logging.new({\n    name = \"Craftable Bandage\",\n    logLevel = \"INFO\",\n})\n\nlocal bandageId = \"AB_alc_Healbandage02\"\n\n--- @param e CraftingFramework.MenuActivator.RegisteredEvent\nlocal function registerBushcraftingRecipe(e)\n    local bushcraftingActivator = e.menuActivator\n    --- @type CraftingFramework.Recipe.data\n    local recipe = {\n        id = bandageId,\n        craftableId = bandageId,\n        description = \"Simple cloth bandages for the dressing of wounds.\",\n        materials = { { material = \"fabric\", count = 1 } },\n        skillRequirements = { ashfall.bushcrafting.survivalTiers.novice },\n        soundType = \"fabric\",\n        category = \"Other\",\n    }\n    local recipes = { recipe }\n    bushcraftingActivator:registerRecipes(recipes)\n    log:info(\"Registered bandage recipe\")\nend\n\n--- @param e initializedEventData\nlocal function initializedCallback(e)\n    event.register(\"Ashfall:ActivateBushcrafting:Registered\",\n                registerBushcraftingRecipe)\n    log:info(\"Initialized\")\nend\nevent.register(tes3.event.initialized, initializedCallback,\n            { priority = 100 }) -- before crafting framework\n</code></pre> <p>Next - Section 3: Mod Config Menu, If Statements, Concatenating Strings</p>"},{"location":"3_mcm/","title":"Section 3: Mod Config Menu, If Statements, Concatenating Strings","text":"<p>Welcome back, today we're gonna learn about if statements, concatenating strings, and how to setup a mod config menu.</p>"},{"location":"3_mcm/#if-statements","title":"If Statements","text":"<p>An if statement will first check a condition and if the condition is true then all the lines of code under the if statement and before <code>else/elseif/end</code> will execute.</p> <p>A quick example, we can create an if statement here in the <code>initializedCallback</code> to check if we have Ashfall, Crafting Framework, and Skills Module installed. And if not, tell the script to stop running. </p> <p>Remember in the last episode, we imported these modules to our script using the <code>include</code> function. So when the module is not found, it returns nil. This means if we don't have Ashfall installed, the <code>ashfall</code> variable will be nil.</p> <p>Since <code>not nil</code> equals <code>true</code>, the script will return and stop running. This is also called a nil check.</p> <pre><code>local function initializedCallback(e)\nif not ashfall then\nreturn\nend\nif not CraftingFramework then\nreturn\nend\nif not skillModule then\nreturn\nend\nevent.register(\"Ashfall:ActivateBushcrafting:Registered\",\n                   registerBushcraftingRecipe)\n</code></pre> <p>This is an example code. We don't actually need them, as the dependency manager will do the same thing. We will discuss this in section 5.</p>"},{"location":"3_mcm/#mod-config-menu","title":"Mod Config Menu","text":"<p>Another condition that we should check for is whether the mod is enabled or not. The common way to disable a MWSE mod is through the Mod Config Menu. So we need to add one for our mod.</p> <p>To do that, register the <code>\"modConfigReady\"</code> event outside of <code>initializedCallback</code>. We can go to the doc page for <code>\"modConfigReady\"</code> event and copy this template code to our main.lua.</p> <pre><code>local config = require(\"MyMod.config\")\n\nlocal function onModConfigReady()\n    local template = mwse.mcm.createTemplate({ name = \"My Mod\" })\n    template:saveOnClose(\"My Mod\", config)\n    template:register()\n\n    local settings = template:createSideBarPage({ label = \"Settings\" })\n    settings.sidebar:createInfo({\n        -- This text will be on the right-hand side block\n        text = \"My Mod v. 1.0\\n\\nCreated by me.\\n\\nHover over a feature for more info.\"\n    })\n\n    settings:createOnOffButton({\n        label = \"Feature\",\n        -- The text in the description will replace the text\n        -- in sidebar on the right-hand side, when this button\n        -- is hovered over.\n        description = \"This feature does...\",\n        variable = mwse.mcm.createTableVariable({\n            id = \"feature\",\n            table = config,\n        })\n    })\nend\n\nevent.register(tes3.event.modConfigReady, onModConfigReady)\n</code></pre> <p>We need to change a few things here since right now this is a mod configuration menu for a mod called \"My Mod\".</p> <p>First line here is loading another file, <code>config.lua</code>, in the <code>\\MyMod</code> folder. This is a common way to load your config but since this is a relatively small mod, we can just load the config in <code>main.lua</code>. </p> <p>First, move the config variable as high as we can. And we will change <code>local config = require(\"MyMod.config\")</code> to this:</p> <pre><code>local configPath = \"Craftable Bandage\"\nlocal defaultConfig = { enabled = true, logLevel = \"INFO\" }\nlocal config = mwse.loadConfig(configPath, defaultConfig)\n</code></pre> <p>What this does is when the script gets configuration data from the <code>config</code> variable, MWSE will try to load a json file in the <code>config</code> folder with this <code>configPath</code> name. If the file doesn't exist, it loads <code>defaultConfig</code> table instead.</p> <p>Let's use this <code>enabled</code> config option in our <code>initializedCallback</code> so it checks if the mod is enabled or not.</p> <pre><code>local function initializedCallback(e)\nif not config.enabled then\nreturn\nend\n</code></pre> <p>Right now, the mod is always enabled because we don't have a way to disable it yet. So back to the MCM, replace all of the occurrences of \"<code>\"My Mod\"</code>\" with \"<code>\"Craftable Bandage\"\"</code>. </p> <p>I'll explain the template code a bit here. <code>createTemplate()</code> paired with <code>template:register()</code> is how you add a page in the Mod Config Menu.</p> <p><code>saveOnClose()</code> is how your config gets saved in the json file. The first argument here is the configPath, the json file name that I mentioned before, and the second argument takes the config table.</p> <p><code>createSideBarPage()</code> is how you get the two-column page for your MCM. You can also use <code>createPage()</code> instead if you like a single-column page. If you choose to use the side bar page, usually we'll include some info on the right column using <code>createInfo()</code>. </p>"},{"location":"3_mcm/#concatenating-strings","title":"Concatenating Strings","text":"<p>So let's copy over our mod description here.</p> <pre><code>settings.sidebar:createInfo({\n        -- This text will be on the right-hand side column\n        text = \"Craftable Bandage\\n\\nCreated by Amalie.\\n\\n\" ..\n        \"This mod allows you to craft OAAB bandages with novice bushcrafting skill.\" ..\n        \"It serves as an alternative to alchemy and restoration\",\n    })\n</code></pre> <p>You can see the description gets quite long there, so I use string concatenation to split them into multiple lines. To concatenate strings in Lua, use the double dot <code>..</code> between two strings. And here <code>\\n</code> means a new line.</p>"},{"location":"3_mcm/#mod-config-menu-continued","title":"Mod Config Menu (Continued)","text":"<p>Back to MCM, <code>createOnOffButton</code> is the most used function and it's also how we create an enable/disable button for our mod. Let's change the <code>label</code> to \"Enable Mod\".</p> <p><code>description</code> is the text you'll see on the right column when the mouse hovers over the label and button. If your config option needs some explanation, this is how you add it. But an enable/disable button is pretty straight-forward, so I don't feel the need to specify that.</p> <p><code>variable</code> is the variable you want to change by clicking the button. <code>id</code> is the variable name. <code>table</code> is the table the variable is in. We want to change the config.enabled variable by clicking on this button. The <code>id</code> here should be <code>enabled</code> and table should be <code>config</code>. </p> <p>In our case, we also need to set the <code>restartRequired</code> field to <code>true</code> so a message box will popup to warn the user. When the game first loads this script, if the mod is enabled, it registers the recipe, so it doesn't matter if we disable it in game. </p> <pre><code>settings:createOnOffButton({\n    label = \"Enable Mod\",\n    variable = mwse.mcm.createTableVariable({\n        id = \"enabled\",\n        table = config,\n        restartRequired = true,\n    }),\n})\n</code></pre> <p>While you're at it, let's add a dropdown element to set the log level of our logger through MCM. Remember to also change the <code>logLevel</code> to <code>config.logLevel</code> when we create the logger using <code>logging.new()</code>.</p> <pre><code>local log = logging.new({\n    name = \"Craftable Bandage\",\nlogLevel = config.logLevel,\n})\n...\n    })\nsettings:createDropdown({\nlabel = \"Log Level\",\noptions = {\n{ label = \"TRACE\", value = \"TRACE\" },\n{ label = \"DEBUG\", value = \"DEBUG\" },\n{ label = \"INFO\", value = \"INFO\" },\n},\nvariable = mwse.mcm.createTableVariable({\nid = \"logLevel\",\ntable = config,\n}),\ncallback = function(self)\nlog:setLogLevel(self.variable.value)\nend,\n})\nend\n</code></pre> <p>To test the MCM, you can change the \"Registered bandage recipe\" log to be a debug log. So now when we load the game and the <code>logLevel</code> is set to <code>\"INFO\"</code>, you should not be able to see this, but if you change it to <code>\"DEBUG\"</code>, after a restart you should be able to see it again.</p> <pre><code>log:debug(\"Registered bandage recipe\")\n</code></pre> <p>Let's launch the game to check if our mod config menu is registered successfully. You should be able to see the enable mod button and the log level setting dropdown.</p> <p>That's it for today. It is encouraged that you play around with these settings to have a better understanding of how the mod gets disabled and enabled by pressing the button, and how the log level gets changed.</p> <p>Today, you've learned what an if statement is, how to concatenate strings, and most importantly how to add a mod config menu to your MWSE mod.</p> What your main.lua should look like <pre><code>--[[\n    Mod: Craftable Bandage\n    Author: Amalie\n\n    This mod allows you to craft OAAB bandages with novice bushcrafting skill.\n    It serves as an alternative to alchemy and restoration.\n]] --\nlocal ashfall = include(\"mer.ashfall.interop\")\nlocal CraftingFramework = include(\"CraftingFramework\")\nlocal skillModule = include(\"OtherSkills.skillModule\")\nlocal logging = require(\"logging.logger\")\n\nlocal configPath = \"Craftable Bandage\"\nlocal defaultConfig = { enabled = true, logLevel = \"INFO\" }\nlocal config = mwse.loadConfig(configPath, defaultConfig)\n\n---@type mwseLogger\nlocal log = logging.new({\n    name = \"Craftable Bandage\",\n    logLevel = config.logLevel,\n})\n\nlocal bandageId = \"AB_alc_Healbandage02\"\n\n--- @param e CraftingFramework.MenuActivator.RegisteredEvent\nlocal function registerBushcraftingRecipe(e)\n    local bushcraftingActivator = e.menuActivator\n    --- @type CraftingFramework.Recipe.data\n    local recipe = {\n        id = bandageId,\n        craftableId = bandageId,\n        description = \"Simple cloth bandages for the dressing of wounds.\",\n        materials = { { material = \"fabric\", count = 1 } },\n        skillRequirements = { ashfall.bushcrafting.survivalTiers.novice },\n        soundType = \"fabric\",\n        category = \"Other\",\n    }\n    local recipes = { recipe }\n    bushcraftingActivator:registerRecipes(recipes)\n    log:debug(\"Registered bandage recipe\")\nend\n\n--- @param e initializedEventData\nlocal function initializedCallback(e)\n    if not config.enabled then\n        return\n    end\n    event.register(\"Ashfall:ActivateBushcrafting:Registered\",\n                registerBushcraftingRecipe)\n    log:info(\"Initialized\")\nend\nevent.register(tes3.event.initialized, initializedCallback,\n            { priority = 100 }) -- before crafting framework\n\nlocal function onModConfigReady()\n    local template = mwse.mcm.createTemplate(\n                    { name = \"Craftable Bandage\" })\n    template:saveOnClose(\"Craftable Bandage\", config)\n    template:register()\n\n    local settings = template:createSideBarPage({ label = \"Settings\" })\n    settings.sidebar:createInfo({\n        -- This text will be on the right-hand side block\n        text = \"Craftable Bandage\\n\\nCreated by Amalie.\\n\\n\" ..\n        \"This mod allows you to craft OAAB bandages with novice bushcrafting skill.\" ..\n        \"It serves as an alternative to alchemy and restoration\",\n    })\n\n    settings:createOnOffButton({\n        label = \"Enable Mod\",\n        variable = mwse.mcm.createTableVariable({\n            id = \"enabled\",\n            table = config,\n            restartRequired = true,\n        }),\n    })\n    settings:createDropdown({\n        label = \"Log Level\",\n        options = {\n            { label = \"TRACE\", value = \"TRACE\" },\n            { label = \"DEBUG\", value = \"DEBUG\" },\n            { label = \"INFO\", value = \"INFO\" },\n        },\n        variable = mwse.mcm.createTableVariable({\n            id = \"logLevel\",\n            table = config,\n        }),\n        callback = function(self)\n            log:setLogLevel(self.variable.value)\n        end,\n    })\nend\n\nevent.register(tes3.event.modConfigReady, onModConfigReady)\n</code></pre> <p>Next - Section 4: Adding More Bandages Features</p>"},{"location":"4_adding_bandage_features/","title":"Section 4: Adding More Bandages Features","text":"<p>Our mod is almost complete. First we'll look at some scripts from OAAB_Data and then add some additional features for bandages ourselves.</p>"},{"location":"4_adding_bandage_features/#oaab_data-bandages","title":"OAAB_Data Bandages","text":"<p>OAAB_Data actually already comes with a feature for bandages. It plays the bandaging sound instead of the potion drinking sound. We can take a look at how they do it in <code>\\OAAB\\MiscPotions\\main.lua</code>.</p> <p>Studying other people's scripts is a great way for beginners to learn how to mod with MWSE-Lua. </p> <p>All the MWSE-Lua code ever published on Nexusmods can be found at mwse-lua-dump. If you don't know how to use certain functions or certain events, you can look it up by search the dump. Very very handy!</p> <p>Back to OAAB_Data and the <code>MiscPotions</code> script:</p> <pre><code>-- Prevent drink sounds\nlocal function stopDrinkSounds(e)\n    if not e.item.id:find(\"^AB_alc_\") then return end\n\n    addBlockedSound(e.reference, \"drink\")\n    event.trigger(\"OAAB:equip\", e)\nend\nevent.register(\"equip\", stopDrinkSounds, {priority = 1000})\n</code></pre> <p>It registers the <code>equip</code> event with very high priority to ensure it runs first. Then it checks if the <code>item</code> that's being equipped here has an <code>id</code> that starts with <code>\"AB_alc_\"</code>. The caret symbol <code>^</code> here anchors the pattern at the beginning of the string.</p> <p>Then it calls the <code>addBlockedSound()</code> function to block the drink sound from playing. Then it triggers an event called <code>\"OAAB:equip\"</code> with <code>e</code> as the event data, which is the <code>equipEventData</code>. </p> <p>Next, let's look at another script from OAAB_Data, <code>\\OAAB\\Bandages\\main.lua</code>. This is the script we are gonna base our script on. </p> <pre><code>local function bandageEquipEvent(e)\n    if (e.item.id:find(\"^AB_alc_HealBandage\")) then\n        tes3.playSound({\n            reference = e.reference,\n            sound = \"AB_Bandaging\"\n        })\n    end\nend\nevent.register(\"OAAB:equip\", bandageEquipEvent)\n</code></pre> <p>It registers the aforementioned <code>\"OAAB:equip\"</code> event instead of <code>equip</code>. This is to make sure that the script from <code>MiscPotions</code> runs first. Then it checks if the item being equipped has an <code>id</code> that starts with <code>\"AB_alc_HealBandage\"</code>. If so, play the <code>\"AB_Bandaging\"</code> sound. </p>"},{"location":"4_adding_bandage_features/#adding-our-own-features","title":"Adding Our Own Features","text":"<p>We're going to write a script that's based on this logic to implement two features for bandages.</p> <p>First, we'll get rid of the magical visual effect when using a bandage. </p> <p>Second, we'll make the duration of the healing effect vary according to your character's Survival skill. So, if your skill is at level 20, it heals for 20 seconds; and if your skill is at 40, it heals for 40 seconds.</p> <p>Before we continue, it's important to mention that you should always give credit to any source you use. Here, we're copying from Greatness7's script, and before we are using Merlord's script. Most MWSE-Lua modders are generally okay about other modders using their scripts but there are exceptions. Ask them if you can. Most MWSE-Lua modders hang out at either Morrowind Modding Community or The Dahrk Realm. \"Be excellent to each other.\"</p> <p>We will copy the above script to our main.lua.</p> <p>Instead of <code>playSound</code>, we want to block the magical visual effect from playing. We can do that simply by blocking the event and applying the magical effect ourselves.</p> <p>To block an event, return <code>false</code>. Then, to apply the magical effect, we use the <code>applyMagicSource()</code> function from the <code>tes3</code> API. Here we pass a table of magic effects to mimic the vanilla behaviour. </p> <pre><code>---@param e equipEventData\nlocal function bandageEquipEvent(e)\n    if (e.item.id:find(\"^AB_alc_HealBandage\")) then\ntes3.applyMagicSource({\nreference = e.reference,\nname = \"Bandage\",\neffects = {\n{\nid = tes3.effect.restoreHealth,\nduration = 30,\nmin = 1,\nmax = 1,\n},\n},\n})\nreturn false\nend\nend\n</code></pre> <p>We also need to remove the bandage, once it is consumed. Here we need to put <code>removeItem()</code> inside <code>timer.delayOneFrame()</code>. Otherwise, the game will crash. </p> <p>The default timer type for <code>delayOneFrame()</code> is <code>simulate</code> time, a timer that will not advance in menu mode. However, if we want the bandage to be removed immediately after we use it, we need to set it to <code>timer.real</code>, a timer that advances at real time. </p> <pre><code>        })\ntimer.delayOneFrame(function()\ntes3.removeItem({\nreference = e.reference,\nitem = e.item,\nplaySound = false,\n})\nend, timer.real)\nreturn false\n</code></pre> <p>Also, it's nice to have a message popup saying \"Bandage applied\" if the user is the player. </p> <pre><code>        end, timer.real)\nif e.reference == tes3.player then\ntes3.messageBox(\"Bandage applied\")\nend\nreturn false\n</code></pre> <p>Now, if we test it in-game and we use the bandage, it won't play the vfx. That's the first feature done. Next, we want the duration of the effect to vary depending on your character's survival skill. </p> <p>Let's create two variables <code>bandageEffect</code> an <code>duration</code> and use it in the table of effects we pass in the <code>applyMagicSource()</code> function. The <code>bandageEffect</code> needs to be defined outside function <code>registerBushcraftingRecipe(e)</code>, as we need to use it later. Assign string <code>\"Bandage\"</code> to the variable. Then we'll create a function called <code>getEffectDuration()</code> that accepts <code>e.reference</code> as the argument and returns the duration to the <code>duration</code> variable. </p> <pre><code>local bandageEffect = \"Bandage\"\n\n---@param ref tes3reference\n---@return integer duration\nlocal function getEffectDuration(ref)\n    local duration\n    return duration\nend\n...\n    if (e.item.id:find(\"^AB_alc_HealBandage\")) then\n        local duration = getEffectDuration(e.reference)\n        tes3.applyMagicSource({\n            reference = e.reference,\n            name = bandageEffect,\n            effects = {\n                {\n                    id = tes3.effect.restoreHealth,\n                    duration = duration,\n                    min = 1,\n</code></pre> <p>Next, we need to add our logic in the <code>getEffectDuration()</code> function so the duration varies. Since only the player has Skills Module skills, we want this survival-based duration feature to only affect the player. </p> <pre><code>local function getEffectDuration(ref)\n    local duration\nif ref == tes3.player then\nreturn duration\nelse\nreturn 30\nend\nend\n</code></pre> <p>We can get the player's survival skill using the <code>getSkill()</code> function in Skills Module. We use the <code>clamp()</code> function from the <code>math</code> library to clamp the skill level between 20 and 40, then assign it to the return value <code>duration</code>.</p> <pre><code>    if ref == tes3.player then\nlocal skillLevel = skillModule.getSkill(\"Ashfall:Survival\").value\nduration = math.clamp(skillLevel, 20, 40)\nreturn duration\n    else\n</code></pre> <p>Now, if our character is level 30 in Survival, the effect should last for 30 seconds. And if it's level 100, the duration will be clamped at 40 seconds. </p> <p>One final feature we'll add is stopping the healing effect if the bandage user gets hit while it's active. To do that, we need to register both the <code>damaged</code> and <code>damagedHandToHand</code> events. We'll name the callback <code>removeBandageHealing</code>. </p> <pre><code>---@param e damagedEventData|damagedHandToHandEventData\nlocal function removeBandageHealing(e)\nend\n...\n    event.register(\"OAAB:equip\", bandageEquipEvent)\nevent.register(\"damaged\", removeBandageHealing)\nevent.register(\"damagedHandToHand\", removeBandageHealing)\nlog:info(\"Initialized\")\n</code></pre>"},{"location":"4_adding_bandage_features/#loops","title":"Loops","text":"<p>We want the healing effect to stop when someone is damaged. First, we need to figure out if the <code>reference</code> is using the bandage when damaged. We can find that out by looping through the <code>activeMagicEffectList</code> of <code>e.reference.mobile</code>. </p> <p>Hovering over <code>activeMagicEffectList</code>, it says it is of type <code>tes3activeMagicEffect[]</code>. The pair of brackets here means it is a list of <code>tes3activeMagicEffect</code>. </p> <p>To iterate the effects in this list, we're gonna use a <code>for</code> loop. Loop is an essential part of programming, so it's important that you know how to use them. This is the basic structure of a for loop.</p> <pre><code>local function removeBandageHealing(e)\nlocal activeMagicEffectList = e.reference.mobile\n.activeMagicEffectList\nfor _, activeMagicEffect in ipairs(activeMagicEffectList) do\nend\nend\n</code></pre> <p>We will add the logic in the loop to check if any of the effects has the name of <code>\"Bandage\"</code>. If so, we set the <code>timeActive</code> field to its <code>duration</code> so the effect will end. </p> <pre><code>    for _, activeMagicEffect in ipairs(activeMagicEffectList) do\nif activeMagicEffect.instance.source.name == bandageEffect then\nactiveMagicEffect.effectInstance.timeActive =\nactiveMagicEffect.duration\nend\nend\n</code></pre> <p>Of course, this is not the best way to do it as all effects called <code>\"Bandage\"</code> will then end whenever a <code>mobile</code> get damaged, even if the effect is not added by our mod. </p> <p>Also, keep in mind that the <code>source</code> here is not the bandage object, it is the magic source that we apply to <code>reference</code> that uses a bandage.</p> <p>So, our mod is done! The only thing left to do right now is to add the metadata file and zip up the mod. We'll do that in the next section.</p> What your main.lua should look like <pre><code>--[[\n    Mod: Craftable Bandage\n    Author: Amalie\n\n    This mod allows you to craft OAAB bandages with novice bushcrafting skill.\n    It serves as an alternative to alchemy and restoration.\n]] --\nlocal ashfall = include(\"mer.ashfall.interop\")\nlocal CraftingFramework = include(\"CraftingFramework\")\nlocal skillModule = include(\"OtherSkills.skillModule\")\nlocal logging = require(\"logging.logger\")\n\nlocal configPath = \"Craftable Bandage\"\nlocal defaultConfig = { enabled = true, logLevel = \"INFO\" }\nlocal config = mwse.loadConfig(configPath, defaultConfig)\n\n---@type mwseLogger\nlocal log = logging.new({\n    name = \"Craftable Bandage\",\n    logLevel = config.logLevel,\n})\n\nlocal bandageId = \"AB_alc_Healbandage02\"\nlocal bandageEffect = \"Bandage\"\n\n--- @param e CraftingFramework.MenuActivator.RegisteredEvent\nlocal function registerBushcraftingRecipe(e)\n    local bushcraftingActivator = e.menuActivator\n    --- @type CraftingFramework.Recipe.data\n    local recipe = {\n        id = bandageId,\n        craftableId = bandageId,\n        description = \"Simple cloth bandages for the dressing of wounds.\",\n        materials = { { material = \"fabric\", count = 1 } },\n        skillRequirements = { ashfall.bushcrafting.survivalTiers.novice },\n        soundType = \"fabric\",\n        category = \"Other\",\n    }\n    local recipes = { recipe }\n    bushcraftingActivator:registerRecipes(recipes)\n    log:debug(\"Registered bandage recipe\")\nend\n\n---@param ref tes3reference\n---@return integer duration\nlocal function getEffectDuration(ref)\n    local duration\n    if ref == tes3.player then\n        local skillLevel = skillModule.getSkill(\"Ashfall:Survival\").value\n        duration = math.clamp(skillLevel, 20, 40)\n        return duration\n    else\n        return 30\n    end\nend\n\n---@param e equipEventData\nlocal function bandageEquipEvent(e)\n    if (e.item.id:find(\"^AB_alc_HealBandage\")) then\n        local duration = getEffectDuration(e.reference)\n        tes3.applyMagicSource({\n            reference = e.reference,\n            name = \"Bandage\",\n            effects = {\n                {\n                    id = tes3.effect.restoreHealth,\n                    duration = duration,\n                    min = 1,\n                    max = 1,\n                },\n            },\n        })\n        timer.delayOneFrame(function()\n            tes3.removeItem({\n                reference = e.reference,\n                item = e.item,\n                playSound = false,\n            })\n        end, timer.real)\n        if e.reference == tes3.player then\n            tes3.messageBox(\"Bandage applied\")\n        end\n        return false\n    end\nend\n\n---@param e damagedEventData|damagedHandToHandEventData\nlocal function removeBandageHealing(e)\n    local activeMagicEffectList = e.reference.mobile\n                                .activeMagicEffectList\n    for _, activeMagicEffect in ipairs(activeMagicEffectList) do\n        if activeMagicEffect.instance.source.name == \"Bandage\" then\n            activeMagicEffect.effectInstance.timeActive =\n            activeMagicEffect.duration\n        end\n    end\nend\n\n--- @param e initializedEventData\nlocal function initializedCallback(e)\n    if not config.enabled then\n        return\n    end\n    if not ashfall then\n        return\n    end\n    if not CraftingFramework then\n        return\n    end\n    if not skillModule then\n        return\n    end\n    event.register(\"Ashfall:ActivateBushcrafting:Registered\",\n                registerBushcraftingRecipe)\n    event.register(\"OAAB:equip\", bandageEquipEvent)\n    event.register(\"damaged\", removeBandageHealing)\n    event.register(\"damagedHandToHand\", removeBandageHealing)\n    log:info(\"Initialized\")\nend\nevent.register(tes3.event.initialized, initializedCallback) -- before crafting framework\n\nlocal function onModConfigReady()\n    local template = mwse.mcm.createTemplate(\n                    { name = \"Craftable Bandage\" })\n    template:saveOnClose(\"Craftable Bandage\", config)\n    template:register()\n\n    local settings = template:createSideBarPage({ label = \"Settings\" })\n    settings.sidebar:createInfo({\n        -- This text will be on the right-hand side block\n        text = \"Craftable Bandage\\n\\nCreated by Amalie.\\n\\n\" ..\n        \"This mod allows you to craft OAAB bandages with novice bushcrafting skill.\" ..\n        \"It serves as an alternative to alchemy and restoration\",\n    })\n\n    settings:createOnOffButton({\n        label = \"Enable Mod\",\n        variable = mwse.mcm.createTableVariable({\n            id = \"enabled\",\n            table = config,\n            restartRequired = true,\n        }),\n    })\n    settings:createDropdown({\n        label = \"Log Level\",\n        options = {\n            { label = \"DEBUG\", value = \"DEBUG\" },\n            { label = \"INFO\", value = \"INFO\" },\n        },\n        variable = mwse.mcm.createTableVariable({\n            id = \"logLevel\",\n            table = config,\n        }),\n        callback = function(self)\n            log:setLogLevel(self.variable.value)\n        end,\n    })\nend\n\nevent.register(tes3.event.modConfigReady, onModConfigReady)\n</code></pre> <p>Next - Section 5: Metadata Files</p>"},{"location":"5_metadata/","title":"Section 5: Metadata File","text":"<p>Welcome back! When we last left off, we have finished the mod. All we have to do right now is to add a metadata file for our mod. </p>"},{"location":"5_metadata/#metadata-file","title":"Metadata File","text":"<p>A metadata file is a file that is primarily used for checking dependencies. Dependency Manager is a MWSE feature added in February 2023. Modders are strongly recommended to add a metadata file for their mods so users would get a warning if any required files are missing. </p> <p>To add a metadata file for your mod, in your <code>\\Data Files</code> diretory, create a file with name that ends with <code>-metadata.toml</code>. Our mod is called <code>\"Craftable Bandage\"</code>, so I'll name it <code>Craftable Bandage-metadata.toml</code>. </p> <p>The metadata file mainly includes two types of information. First is the information about your mod: the name of mod, who's the modder, where to download your mod, and the version of the mod. They should be under the <code>[package]</code> section.</p> <pre><code>[package]\nname = \"Craftable Bandage\"\nhomepage = \"https://github.com/amaliegay/mwse-modding-tutorial\"\nauthors = [ \"Amalie\",]\nversion = \"1.0.0\"\n</code></pre> <p>The second type of information is the dependencies of your mod. Besides checking if you have other mods installed, the dependency manager can check if assets like Meshes and Textures are missing. It can also check if your the bsa archives are registered, and if MWSE should be updated. You can read more about this in the doc here.</p> <p>Our mod depends on OAAB_Data, Ashfall, Crafting Framework, and Skills Module. So the <code>[dependencies]</code> section should look like this:</p> <pre><code>[dependencies]\nassets = [ \"MWSE/mods/Amalie/craftableBandage\",]\n\n[dependencies.mwse]\nbuildnumber = 3238\n\n[dependencies.mods.\"OAAB_Data\"]\nversion = \"^2.1.9\"\nurl = \"https://www.nexusmods.com/morrowind/mods/49042\"\n\n[dependencies.mods.\"Ashfall\"]\nversion = \"^3.10.0\"\nurl = \"https://www.nexusmods.com/morrowind/mods/49057\"\n\n[dependencies.mods.\"The Crafting Framework\"]\nversion = \"^1.12.0\"\nurl = \"https://www.nexusmods.com/morrowind/mods/51009\"\n\n[dependencies.mods.\"Skills Module\"]\nmwse-module = \"OtherSkills\"\nurl = \"https://www.nexusmods.com/morrowind/mods/46034\"\n</code></pre> <p>In <code>assets</code>, you should add the file path of the assests of your mod.</p> <p>If your mod uses recent added feature of mwse, you should specify the <code>buildnumber</code> in <code>mwse</code>. You can find the <code>buildnumber</code> in the first line of <code>MWSE.log</code>. It is the number after version number and before \"built\". For example, the buildnumber is <code>3238</code> if the first line is <code>Morrowind Script Extender v2.1.0-3132 (built Mar 30 2023) hooked.</code></p> <p>If your mod depends on other mods, you can specify them with <code>[dependencies.mods.\"Mod Name\"]</code>. If the mod comes with a metadata file, you can check the version with <code>version = \"^x.x.x\"</code>. If the mod doesn't come with a metadata file, you could check if a plugin or master file is installed, write <code>plugin = plugin name.esp</code>. To check if the MWSE-Lua scripts are installed, write, for example, <code>mwse-module = mer.ashfall</code>. This is checking if the folder <code>\\MWSE\\mer\\ashfall</code> is installed. <code>url</code> is where you specify where to download said mod. </p> What your Craftable Bandage-metadata.toml should look like <pre><code>[package]\nname = \"Craftable Bandage\"\nhomepage = \"https://github.com/amaliegay/mwse-modding-tutorial\"\nauthors = [\"Amalie\"]\nversion = \"1.0.0\"\n\n[dependencies]\nassets = [\"MWSE/mods/Amalie/craftableBandage\"]\n\n[dependencies.mwse]\nbuildnumber = 3238\n\n[dependencies.mods.\"OAAB_Data\"]\nversion = \"^2.1.9\"\nurl = \"https://www.nexusmods.com/morrowind/mods/49042\"\n\n[dependencies.mods.\"Ashfall\"]\nversion = \"^3.10.0\"\nurl = \"https://www.nexusmods.com/morrowind/mods/49057\"\n\n[dependencies.mods.\"The Crafting Framework\"]\nversion = \"^1.12.0\"\nurl = \"https://www.nexusmods.com/morrowind/mods/51009\"\n\n[dependencies.mods.\"Skills Module\"]\nmwse-module = \"OtherSkills\"\nurl = \"https://www.nexusmods.com/morrowind/mods/46034\"\n</code></pre>"},{"location":"5_metadata/#zip-up","title":"Zip Up","text":"<p>Finally, we zip up the two files in <code>Craftable Bandage.7z</code>:</p> <pre><code>.\n\u251c\u2500 MWSE/\n\u2502  \u2514\u2500 mods/\n\u2502     \u2514\u2500 Amalie/\n\u2502       \u2514\u2500 craftableBandage/\n\u2502          \u2514\u2500 main.lua\n\u2514\u2500 Craftable Bandage-metadata.toml\n</code></pre> <p>That's it! Thank you so much for following this tutorial. </p>"}]}